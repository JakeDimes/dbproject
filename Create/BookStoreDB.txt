--
-- File generated with SQLiteStudio v3.3.3 on Wed Oct 26 18:19:58 2022
-- File Last Modified: Sat Dec 5 15:07:31 2022
-- Text encoding used: System
--

-- Turn off foreign keys temporarlily
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- TABLES

-- Table: Author
CREATE TABLE Author (
    Author_ID    INTEGER      NOT NULL
                              PRIMARY KEY,
    Fname        VARCHAR (30),
    Mname        VARCHAR (15),
    Lname        VARCHAR (30),
    Contact_info VARCHAR (60) 
);


-- Table: Book
CREATE TABLE Book (
    ISBN            VARCHAR (13)   PRIMARY KEY
                                   NOT NULL,
    Pub_Domain      VARCHAR  NOT NULL
                                   REFERENCES Publisher (Web_Domain) ON DELETE NO ACTION,
    Title           VARCHAR (255),
    Year            CHAR (4),
    Price           DECIMAL (6, 2) NOT NULL CHECK (Price >= 0),
    Inventory_Count INTEGER        NOT NULL CHECK (Inventory_Count >= 0)
);
-- Table: Category
CREATE TABLE Category (
	B_ISBN 	VARCHAR (13) 	NOT NULL
				REFERENCES Book (ISBN) On DELETE CASCADE,
	Category VARCHAR 	NOT NULL,
	PRIMARY KEY (
		B_ISBN,
		Category
	)
);

-- Table: Contains
CREATE TABLE Contains (
    B_ISBN   VARCHAR (13) REFERENCES Book (ISBN) ON DELETE NO ACTION
                          NOT NULL,
    Ord_ID   INTEGER      REFERENCES Purchase (Order_ID) ON DELETE CASCADE
                          NOT NULL,
    Quantity INTEGER      NOT NULL CHECK (Quantity >= 0),
    PRIMARY KEY (
        B_ISBN,
        Ord_ID
    )
);


-- Table: Customer
CREATE TABLE Customer (
    Email        VARCHAR NOT NULL
                              PRIMARY KEY,
    Fname        VARCHAR (30),
    Mname 	 VARCHAR (15),
    Lname        VARCHAR (30),
    Phone_Number CHAR (10) 
);

-- Table: Employee
CREATE TABLE Employee (
    Employee_id  INT            NOT NULL
                                PRIMARY KEY,
    Fname        VARCHAR (30),
    Mname 	 VARCHAR (15),
    Lname        VARCHAR (30),
    Salary       DECIMAL (9, 2) NOT NULL CHECK(Salary >= 0),
    Department   VARCHAR (30)   NOT NULL,
    Work_Hours   INTEGER NOT NULL CHECK(Work_Hours >= 0),
    Phone_Number CHAR (10)
);

-- Table: Publisher
CREATE TABLE Publisher (
    Web_Domain     VARCHAR  PRIMARY KEY
                                 NOT NULL,
    Publisher_name VARCHAR (255) NOT NULL,
    Contact_info   VARCHAR (60) 
);

-- Table: Purchase
CREATE TABLE Purchase (
    Order_ID   		INT          NOT NULL
                        	    PRIMARY KEY,
    Cust_Email 		VARCHAR REFERENCES Customer (Email) ON DELETE CASCADE,
    Purchase_Time 	DATETIME     NOT NULL
);


-- Table: Sells
CREATE TABLE Sells (
    Emp_ID INTEGER REFERENCES Employee (Employee_id) ON DELETE CASCADE
                   NOT NULL,
    Ord_ID INTEGER REFERENCES Purchase (Order_ID) ON DELETE CASCADE
                   NOT NULL,
    PRIMARY KEY (
        Emp_ID,
        Ord_ID
    )
);


-- Table: Writes
CREATE TABLE Writes (
    B_ISBN  VARCHAR (13) REFERENCES Book (ISBN) ON DELETE CASCADE
                         NOT NULL,
    Auth_ID INTEGER      REFERENCES AUTHOR (Author_id) ON DELETE CASCADE
                         NOT NULL,
    PRIMARY KEY (
        B_ISBN,
        Auth_ID
    )
);

-- VIEWS

-- This view finds a list of all authors and their most popular book

CREATE VIEW 	Most_Popular AS  
SELECT 		ID, Last_Name, BISBN, SumQ
FROM 		(
		SELECT 		A.Author_ID AS ID, A.Lname AS Last_Name, B.ISBN AS BISBN, SUM(Co.Quantity) AS SumQ
		FROM 		Author As A, Book AS B, Writes AS W, Contains AS CO
		WHERE 		A.Author_ID = W.Auth_ID 
				AND B.ISBN = W.B_ISBN
				AND Co.B_ISBN = B.ISBN
		GROUP BY 	B.ISBN
		)
Group By 	ID
Having 		MAX(SumQ);

-- This view finds how many books each employee has sold.
CREATE VIEW 	Employee_Sales AS
SELECT		E.Employee_id, E.Fname AS First_Name, E.Lname AS Last_Name, SUM(Co.Quantity) AS Number_Books_Sold
FROM		Employee AS E, Sells as S, Purchase AS P, Contains as Co
WHERE		S.Emp_ID = E.Employee_id
		AND S.Ord_ID = P.Order_ID
		AND Co.Ord_ID = P.Order_ID
GROUP BY 	E.Employee_id;

-- This view shows the tiles of books in all categories, and how many distinct Books (by ISBN) there are

CREATE VIEW Categories AS
SELECT 		Ca.Category AS Category, group_concat(B.Title, '
') AS Title, COUNT(B.ISBN) AS Number_Books
FROM 		Book AS B, Category AS Ca
WHERE 		B.ISBN = Ca.B_ISBN
GROUP BY 	Ca.Category;


-- INDEXES

-- An index for the purchase table
CREATE UNIQUE INDEX Idx_Purchase ON Purchase (Order_ID);

-- An index for the author table
CREATE UNIQUE INDEX Idx_Author ON Author (Author_ID);

-- An index for the Book table
CREATE UNIQUE INDEX Idx_Book ON Book (ISBN);

-- An index for the customer table
CREATE UNIQUE INDEX Idx_Customer ON Customer (Email);


COMMIT TRANSACTION;
PRAGMA foreign_keys = on;




